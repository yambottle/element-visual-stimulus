{"config": {"lang": ["en"], "separator": "[\\s\\-]+", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "", "title": "Element Visual Stimulus", "text": "<p>DataJoint Element for visual stimulus presentation with Psychtoolbox. DataJoint Elements collectively standardize and automate data collection and analysis for neuroscience experiments. Each Element is a modular pipeline for data storage and processing with corresponding database tables that can be combined with other Elements to assemble a fully functional pipeline.</p>"}, {"location": "#experiment-flowchart", "title": "Experiment flowchart", "text": ""}, {"location": "#data-pipeline", "title": "Data pipeline", "text": ""}, {"location": "#getting-started", "title": "Getting started", "text": "<ul> <li>Concepts page - Information on stimulus presentation and Element Visual Stimulus</li> </ul> <ul> <li>Tutorials page - Start building your data pipeline</li> </ul> <ul> <li>Code repository</li> </ul>"}, {"location": "changelog/", "title": "Changelog", "text": "<p>Observes Semantic Versioning standard and Keep a Changelog convention.</p>"}, {"location": "changelog/#010-2023-04-04", "title": "0.1.0 - 2023-04-04", "text": "<ul> <li>Add - Documentation</li> <li>Add - Pipeline</li> </ul>"}, {"location": "citation/", "title": "Citation", "text": "<p>If your work uses this Element, please cite the following manuscript and Research Resource Identifier (RRID).</p> <ul> <li>Yatsenko D, Nguyen T, Shen S, Gunalan K, Turner CA, Guzman R, Sasaki M, Sitonic D,   Reimer J, Walker EY, Tolias AS. DataJoint Elements: Data Workflows for   Neurophysiology. bioRxiv. 2021 Jan 1. doi: https://doi.org/10.1101/2021.03.30.437358</li> </ul> <ul> <li>DataJoint Elements (RRID:SCR_021894) -   Element Visual Stimulus (version 0.1.0)</li> </ul>"}, {"location": "concepts/", "title": "Concepts", "text": ""}, {"location": "concepts/#stimulus-synchronization-in-neurophysiology", "title": "Stimulus Synchronization in Neurophysiology", "text": "<p>Researchers focused on sensation and perception in neuroscience often need high temporal precision in when images or videos are rendered, beyond the abilities of most consumer-grade equipment. To know with millisecond precision when an image was displayed on a computer requires taking into account details like monitor refresh rate, CPU and memory usage, eliminating background tasks in the operating system, etc. to have a reproducible delay between the experimenter hitting start and the stimulus being displayed. Even still, there may be dropped frames.</p> <p>Alternatively, one can allow for the above sources of variation, but instead record the outcome and piece together timing after the fact. The Element takes this approach by dedicating a corner of the screen to displaying a unique sequence. When captured by a photosensitive diode and decoded, this sequence provides the exact timing for each frame of the stimulus regardless of dropped frames or real-time operating system inaccuracies.</p>"}, {"location": "concepts/#key-partnerships", "title": "Key Partnerships", "text": "<ul> <li>Andreas Tolias Lab (Baylor College of Medicine)</li> </ul>"}, {"location": "concepts/#element-roadmap", "title": "Element Roadmap", "text": "<p>Element Visual Stimulus is a self-contained application that generates and presents  visual stimuli using Psychtoolbox, as well as records  conditions and trials in a DataJoint database. Further development of this Element is  community driven. Upon user requests and based on guidance from the Scientific Steering  Group we will continue adding features to this Element.</p> <ul> <li> Set parameters related to the display of gratings, dots, or 'trippy' (i.e. black and white psychedelic gradient) stimuli.</li> </ul> <ul> <li> During presentation, the corner of the screen is reserved for displaying a photodiode, which provides the exact timing for each frame of the stimulus.</li> </ul> <ul> <li> While Element Visual stimulus is MATLAB-native, the resulting data can be  retrieved in Python as part of a larger workflow. For information on running MATLAB  scripts with Python, see MathWorks documentation.</li> </ul> <ul> <li> Integration with Element Event</li> </ul>"}, {"location": "concepts/#element-architecture", "title": "Element Architecture", "text": "<p>Each of the DataJoint Elements creates a set of tables for common neuroscience data modalities to organize, preprocess, and analyze data. Each node in the following diagram is a table within the Element or a table connected to the Element.</p> <p></p>"}, {"location": "concepts/#condition", "title": "Condition", "text": "<p>The central table is <code>stimulus.Condition</code>, which enumerates all possible stimulus conditions to be presented. It is populated before the stimulus is presented for the first time. The specialization tables below it contain parameters that are specific to each type of stimulus. For example, <code>stimulus.Monet2</code> contains parameters that are specific to a single stimulus condition of the type <code>Monet2</code>. For each tuple in <code>stimulus.Condition</code>, exactly one of the specialization tables contains the corresponding entry. The name of the specialization table is indicated in each row of <code>stimulus.Condition</code> in field <code>stimulus_type</code>. </p> <p>Example data:</p> CONDITION_HASH stimulus_type stimulus_version +9mOEvwZHyV2MiwRBsMy stimulus.Varma 1 +eFINMa+jF58wHzuk9qQ stimulus.Monet 1 +0cObnxIHpoB5RKZJVYj stimulus.Matisse 1 +9nMtSVLIPAj/VEmey+6 stimulus.Matisse 2 +cI6EqAdQgh2tyJ1eMzy stimulus.Matisse 2"}, {"location": "concepts/#trial", "title": "Trial", "text": "<p>The table <code>stimulus.Trial</code> contains the information about the presentation of a condition during a specific scan (from <code>experiment.Scan</code>).  Any number of conditions of any type can be presented during a scan and each condition may be displayed multiple times.</p> <p>Example data:</p> ANIMAL_ID SESSION SCAN_IDX TRIAL_IDX condition_hash last_flip trial_ts flip_times 0 0 0 0 Qjz5gJN2igKvsonApHO1 21322 2022-04-21 16:23:40 =BLOB= 0 0 0 1 KMk2le1nd79vP4uhW+lG 21324 2022-04-21 16:23:42 =BLOB= 0 0 0 2 d3TMSkOO74Y2QzRngY9r 21325 2022-04-21 16:23:43 =BLOB="}, {"location": "tutorials/", "title": "Tutorials", "text": ""}, {"location": "tutorials/#video-tutorial", "title": "Video Tutorial", "text": ""}, {"location": "tutorials/#run-in-matlab", "title": "Run in MATLAB", "text": "<ul> <li>Requirement: MATLAB R2016b+</li> </ul>"}, {"location": "tutorials/#step-1-initialize-screen", "title": "Step 1 - Initialize screen", "text": "<pre><code>&gt;&gt; stimulus.open\n</code></pre>"}, {"location": "tutorials/#step-2-generate-stimulus-conditions-and-queue-trials", "title": "Step 2 - Generate stimulus conditions and queue trials", "text": "<p>Stimulus trials are generated and queued by the scripts in the <code>+stimulus/+conf</code> directory.  You need to know which configuration script needs to be run.</p> <p>For example, to prepare the <code>grate</code> stimulus, run</p> <pre><code>&gt;&gt; stimulus.conf.grate\n</code></pre> <p>While the stimulus is loaded, you will see a sequence of dots <code>.</code> and asterisks <code>*</code>, which respectively indicate whether the conditions are computed anew or are loaded from the database.  Some stimuli take a long time to compute and you might like to run the configuration before you begin the experiment.  On subsequent runs, the computed stimuli will be loaded from the database and will not take as long.</p>"}, {"location": "tutorials/#step-3-run-the-stimulus", "title": "Step 3 - Run the stimulus", "text": "<p>The stimulus must be run for a specific scan in the <code>experiment.Scan</code> table.  Table <code>experiment.Scan</code> contains an example entry that can be used for testing. Its primary key is <code>struct('animal_id', 0, 'session', 0, 'scan_idx', 0)</code>. During the experiment, the correct scan identification must be provided.</p> <p>The following command will run the queued stimulus trials for the example scan.</p> <pre><code>&gt;&gt; stimulus.run(struct('animal_id', 0, 'session', 0, 'scan_idx', 0))\n</code></pre>"}, {"location": "tutorials/#step-4-interrupt-and-resume-the-stimulus", "title": "Step 4 - Interrupt and resume the stimulus", "text": "<ul> <li>While the stimulus is playing, you can interrupt with <code>Ctrl+c</code>. The stimulus program will handle this event, cancel the ongoing trial, and clear the screen.</li> </ul> <ul> <li>To resume the stimulus, repeat the <code>stimulus.run</code> call above.  Or to queue a new set  of trials, run the configuration script again.</li> </ul>"}, {"location": "tutorials/#step-5-exit", "title": "Step 5 - Exit", "text": "<pre><code>&gt;&gt; stimulus.close\n</code></pre>"}, {"location": "tutorials/#run-in-python", "title": "Run in Python", "text": "<p>The stimulus configuration and playback are written and executed in MATLAB. However, the control software can be written in Python to reproduce the steps above.</p>"}, {"location": "tutorials/#step-1-configure", "title": "Step 1 - Configure", "text": "<p>Configure the MATLAB Engine API for Python as described in the  MathWorks documentation.</p>"}, {"location": "tutorials/#step-2-import-packages", "title": "Step 2 - Import packages", "text": "<pre><code>import matlab.engine as eng\nmat = eng.start_matlab()\n</code></pre>"}, {"location": "tutorials/#step-3-initialize-screen", "title": "Step 3 - Initialize screen", "text": "<pre><code>mat.stimulus.open(nargout=0)            \n</code></pre>"}, {"location": "tutorials/#step-4-initialize-conditions-and-queue-trials", "title": "Step 4 - Initialize conditions and queue trials", "text": "<pre><code>mat.stimulus.conf.grate(nargout=0)  \n</code></pre>"}, {"location": "tutorials/#step-5-run-the-stimulus-for-a-specific-scan", "title": "Step 5 - Run the stimulus for a specific scan", "text": "<pre><code>f = mat.stimulus.run(dict(animal_id=0, session=0, scan_idx=0), nargout=0, async=True)\n</code></pre>"}, {"location": "tutorials/#step-6-interrupt-and-resume-stimulus", "title": "Step 6 - Interrupt and resume stimulus", "text": "<pre><code>f.cancel()\nf = mat.stimulus.run(dict(animal_id=0, session=0, scan_idx=0), nargout=0, async=True)\n</code></pre>"}, {"location": "tutorials/#step-7-exit", "title": "Step 7 - Exit", "text": "<pre><code>f.done()  # True if stimulus is done\nf.result()  # Waits until the stimulus is done\nf.stimulus.close(nargout=0)  # Close the stimulus screen \n</code></pre>"}, {"location": "tutorials/#example-queries", "title": "Example queries", "text": "<ul> <li>If the language is unspecified below, the queries run in both MATLAB and Python.</li> </ul>"}, {"location": "tutorials/#all-scans-with-any-visual-stimuli", "title": "All scans with any visual stimuli", "text": "<pre><code>visualScans = experiment.Scan() &amp; stimulus.Trial()\n</code></pre>"}, {"location": "tutorials/#all-scans-with-the-monet-stimulus", "title": "All scans with the <code>Monet</code> stimulus", "text": "<pre><code>monetScans = experiment.Scan() &amp; (stimulus.Trial() * stimulus.Monet())\n</code></pre> <p>or</p> <pre><code>monetScans = experiment.Scan() &amp; (stimulus.Trial() * stimulus.Condition() &amp; 'stimulus_type=\"stimulus.Monet\"')\n</code></pre>"}, {"location": "tutorials/#all-unique-conditions-shown-during-a-given-scan", "title": "All unique conditions shown during a given scan", "text": "<pre><code>## python\nsession_key = dict(session=7302)\nscan_conditions = stimulus.Condition() &amp; (stimulus.Trial() &amp; session_key)\n</code></pre> <pre><code>% matlab\nsessionKey = struct('session', 7302);\nscanConditions = stimulus.Condition &amp; (stimulus.Trial &amp; sessionKey);\n</code></pre>"}]}